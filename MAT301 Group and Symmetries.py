# -*- coding: utf-8 -*-
"""
Created on Sat May 28 00:21:07 2022

@author: Marc Cheng
@topic: MAT301 Group and Symmetries

Note: Zn denotes the multiplicative group of integers modulo n
"""
import math
    
# %% Print all elements of Zn, return the elements as an ordered list
def print_Zn(z, flag=True):
    lst = []
    for i in range(z):
        if math.gcd(i,z)==1:
            lst.append(i)
    if flag is True:
        print('The multiplication group of', i+1, 'is', lst)
    return lst

print_Zn(25)

# %% Check if Zn is cyclic, return True if cyclic, return False if non-cyclic
def is_cyclic(z): 
    lst = print_Zn(z, False)    
    for i in lst:
        mod = []
        for j in range(1,len(lst)+1):
            mod.append((i**j)% z)
            if sorted(lst)==sorted(mod):
                print('Z', z, 'is cyclic')
                return True
    print('Z/',z,' is non-cyclic')
    return False

is_cyclic(64)
    
# %% Print the cycle generated by every element of Zn, return the cycles as a dictionary
def print_cycles(z, flag=True):
    lst = print_Zn(z) 
    dic = {}
    for i in lst:
        mod = []
        for j in range(1,len(lst)+1):
            mod.append((i**j)% z)
        mod = list(dict.fromkeys(mod))
        dic[i] = mod        
        if flag is True:
            print('Cycle of', i, 'is', list(dict.fromkeys(mod)))
    return dic
    
print_cycles(7)

# %% Find all generators of Zn, return the generators as a list
def print_generator(z, flag=True):
    lst = print_Zn(z, False)    
    gen = []
    for i in lst:
        mod = []
        for j in range(1,len(lst)+1):
            mod.append((i**j)% z)        
        mod.sort()
        if mod==lst:
            gen.append(i)            
    if flag is True:
        print('The generator of Z', z, 'is', gen)
    return gen
            
print_generator(47)
        
    